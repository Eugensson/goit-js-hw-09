{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaH,EAAKE,cAAc,uBAChCE,EAAYJ,EAAKE,cAAc,sBAC/BG,EAAcL,EAAKE,cAAc,wBAEvCF,EAAKM,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAEC,iBACF,IAAMC,EAAeC,OAAOP,EAAWQ,OACjCC,EAAOF,OAAON,EAAUO,OACxBE,EAASH,OAAOL,EAAYM,OAElCG,YAAW,WACT,IAAIC,EAAQN,EACRO,EAAW,EAETC,EAAUC,aAAY,WAC1BC,EAAcH,EAAUD,GACrBK,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MACjBC,EAAA1B,GAAS2B,OAAOC,QACd,qBAAoCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAG7CK,OAAM,SAAAP,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MAClBC,EAAA1B,GAAS2B,OAAOI,QAAQ,oBAAmCF,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAGrER,GAASH,GACTI,GAAY,IAEIH,EAAS,GACvBiB,cAAcb,E,GAEfL,E,GACFH,E,IAGL,IAAMU,EAAgB,SAACG,EAAUC,GAC/B,OAAO,IAAIQ,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,GAEpCH,EAAQ,CAAEV,WAAUC,UAEpBU,EAAO,CAAEX,WAAUC,S","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delayInput = form.querySelector('input[name=\"delay\"]');\nconst stepInput = form.querySelector('input[name=\"step\"]');\nconst amountInput = form.querySelector('input[name=\"amount\"]');\n\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  const delayDefault = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n  setTimeout(() => {\n    let delay = delayDefault;\n    let position = 1;\n\n    const timerId = setInterval(() => {\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        });\n\n      delay += step;\n      position += 1;\n\n      if (position == amount + 1) {\n        clearInterval(timerId);\n      }\n    }, step);\n  }, delayDefault);\n}\n\nconst createPromise = (position, delay) => {\n  return new Promise((Fulfill, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      Fulfill({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n};\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","addEventListener","e","preventDefault","delayDefault","Number","value","step","amount","setTimeout","delay1","position1","timerId","setInterval","$ce04d3a99e08e73b$var$createPromise","then","param","position","delay","$parcel$interopDefault","Notify","success","concat","catch","failure","clearInterval","Promise","Fulfill","reject","Math","random"],"version":3,"file":"03-promises.123343b2.js.map"}